{"mappings":"AA0Dc,IAxDd,MAQEA,gBAAgBC,GACd,MAAMC,EAAYC,SAASC,cAAcC,KAAKC,UAE9CJ,EAAUE,cAAc,2BAA2BG,YAAcN,EAAKO,KACtEN,EAAUE,cAAc,4BAA4BG,YAClDN,EAAKQ,MACPP,EAAUE,cAAc,2BAA2BG,YAAcN,EAAKS,KACtER,EAAUE,cAAc,2BAA2BG,YAAcN,EAAKU,I,CAGxEC,QACMP,KAAKQ,WAITR,KAAKQ,UAAW,EAEhBR,KAAKS,WAAaC,aAAY,KAC5B,MAAMC,EAAcC,KAAKC,MACnBC,EAAYd,KAAKe,WAAaJ,EAEpC,GAAkB,IAAdG,EAEF,YADAE,cAAchB,KAAKS,YAIrB,MAAMb,EAAOI,KAAKiB,kBAAkBH,GAEpCd,KAAKL,gBAAgBC,EAAK,GACzB,K,CAGLqB,kBAAkBrB,GAQhB,MAAO,C,KAPMI,KAAKkB,IAAIC,KAAKC,MAAMxB,EAAQ,Q,MAC3BI,KAAKkB,IACjBC,KAAKC,MAAMxB,EAAS,MAAyB,O,KAElCI,KAAKkB,IAAIC,KAAKC,MAAMxB,EAAS,KAAoB,M,KACjDI,KAAKkB,IAAIC,KAAKC,MAAMxB,EAAS,IAAc,M,CAK1DsB,IAAIG,GACF,OAAOC,OAAOD,GAAOE,SAAS,EAAG,I,CAnDnCC,aAAYvB,SAAEA,EAAQc,WAAEA,IACtBf,KAAKC,SAAWA,EAChBD,KAAKe,WAAaA,EAClBf,KAAKS,WAAa,KAClBT,KAAKQ,UAAW,C,GAmDa,CAC/BP,SAAU,WACVc,WAAY,IAAIH,KAAK,mBAGjBL,QAONkB,OAAOlB","sources":["src/js/03-countdown-timer.js"],"sourcesContent":["import '../sass/index.scss';\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.isActive = false;\n  }\n\n  updateTimerFace(time) {\n    const timerFace = document.querySelector(this.selector);\n\n    timerFace.querySelector('span[data-value=\"days\"]').textContent = time.days;\n    timerFace.querySelector('span[data-value=\"hours\"]').textContent =\n      time.hours;\n    timerFace.querySelector('span[data-value=\"mins\"]').textContent = time.mins;\n    timerFace.querySelector('span[data-value=\"secs\"]').textContent = time.secs;\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    this.isActive = true;\n\n    this.intervalId = setInterval(() => {\n      const currentTime = Date.now();\n      const deltaTime = this.targetDate - currentTime;\n\n      if (deltaTime === 0) {\n        clearInterval(this.intervalId);\n        return;\n      }\n\n      const time = this.getTimeComponents(deltaTime);\n\n      this.updateTimerFace(time);\n    }, 1000);\n  }\n\n  getTimeComponents(time) {\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Sept 15, 2022'),\n});\n\ntimer.start();\n\n// const timer2 = new CountdownTimer({\n//   selector: '#timer-2',\n//   targetDate: new Date('Aug 10, 2022'),\n// });\n\ntimer2.start();\n\n// const timer2 = new CountdownTimer({\n//   selector: '#timer-2',\n//   targetDate: new Date('Aug 24, 2022'),\n// });\n\n// timer2.start();\n\n// const timer3 = new CountdownTimer({\n//   selector: '#timer-3',\n//   targetDate: new Date('Dec 31, 2022'),\n// });\n\n// timer3.start();\n"],"names":["updateTimerFace","time","timerFace","document","querySelector","this","selector","textContent","days","hours","mins","secs","start","isActive","intervalId","setInterval","currentTime","Date","now","deltaTime","targetDate","clearInterval","getTimeComponents","pad","Math","floor","value","String","padStart","constructor","timer2"],"version":3,"file":"03-countdown-timer.d9d80adc.js.map"}