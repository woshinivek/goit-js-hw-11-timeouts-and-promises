{"mappings":"AAuDA,MAIMA,EAAkB,EAACC,GAAEA,KAClB,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,GANyBC,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQpCI,YAAW,KACT,MAAMC,EAAaJ,KAAKE,SAAW,GACnCG,QAAQC,IAAIT,GAERO,GACFT,EAAQ,C,GAAEF,E,MAAII,IAEhBD,EAAOH,EAAG,GACTI,EAAM,IAIPU,EAAa,EAACd,GAAEA,EAAEI,MAAEA,MACxBQ,QAAQC,IAAI,eAAeb,kBAAmBI,MAAU,EAGpDW,EAAWf,IACfY,QAAQI,KAAK,gCAAgChB,6BAA8B,EAe7ED,EAAgB,CAAEC,GAAI,GAAIiB,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAEhEhB,EAAgB,CAAEC,GAAI,GAAIiB,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAEhEhB,EAAgB,CAAEC,GAAI,GAAIiB,OAAQ,KAAMC,KAAKJ,GAAYK,MAAMJ,GAE/DhB,EAAgB,CAAEC,GAAI,GAAIiB,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ","sources":["src/js/02-03-transaction.js"],"sourcesContent":["import '../sass/index.scss';\n\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError,\n// а принимала всего один параметр transaction и возвращала промис.\n\n// const randomIntegerFromInterval = (min, max) => {\n//   return Math.floor(Math.random() * (max - min + 1) + min);\n// };\n\n// const makeTransaction = (transaction, onSuccess, onError) => {\n//   const delay = randomIntegerFromInterval(200, 500);\n\n//   setTimeout(() => {\n//     const canProcess = Math.random() > 0.3;\n\n//     if (canProcess) {\n//       onSuccess(transaction.id, delay);\n//     } else {\n//       onError(transaction.id);\n//     }\n//   }, delay);\n// };\n\n// const logSuccess = (id, time) => {\n//   console.log(`Transaction ${id} processed in ${time}ms`);\n// };\n\n// const logError = id => {\n//   console.warn(`Error processing transaction ${id}. Please try again later.`);\n// };\n\n// /*\n//  * Работает так\n//  */\n\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// // makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// // makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// // makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n// /*\n//  * Должно работать так\n//  */\n\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\n// // makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\n// // makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n// // makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n// ================================-=-=-=-=-=-=-=-=-=-=-=======================================================\n// ================================-=-=-=-=-=-=-=-=-=-=-=======================================================\n// ================================-=-=-=-=-=-=-=-=-=-=-=======================================================\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = ({ id }) => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      console.log(delay);\n\n      if (canProcess) {\n        resolve({ id, delay });\n      }\n      reject(id);\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, delay }) => {\n  console.log(`Transaction ${id} processed in ${delay}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"],"names":["$2a85fa9d016f6404$var$makeTransaction","id","Promise","resolve","reject","delay","min","max","Math","floor","random","setTimeout","canProcess","console","log","$2a85fa9d016f6404$var$logSuccess","$2a85fa9d016f6404$var$logError","warn","amount","then","catch"],"version":3,"file":"02-03-transaction.f8167d2b.js.map"}